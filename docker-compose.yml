version: '3'
services:
  zookeeper:
    hostname: zookeeper
    ports:
      - "2181:2181"
    image: wurstmeister/zookeeper
    container_name: zookeeper

  kafka:
    hostname: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_CREATE_TOPICS: >
        fb.event.match_scheduled:1:1,fb.event.match_started:1:1,fb.event.goal_scored:1:1,
        fb.event.card_received:1:1,fb.event.match_finished:1:1,fb.event.player_started_career:1:1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 999
    image: wurstmeister/kafka:1.1.0
    container_name: kafka
    links:
      - zookeeper

  schema-registry:
    image: "confluentinc/cp-schema-registry:4.1.0"
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - kafka
    ports:
      - '8081:8081'
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
    extra_hosts:
      - "moby:127.0.0.1"

  # Runs the Kafka KSQL Server
  ksql-server:
    image: "confluentinc/ksql-cli:4.1.0"
    hostname: ksql-server
    ports:
      - '8088:8088'
    depends_on:
      - kafka
      - schema-registry
    # Note: The container's `run` script will perform the same readiness checks
    # for Kafka and Confluent Schema Registry, but that's ok because they complete fast.
    # The reason we check for readiness here is that we can insert a sleep time
    # for topic creation before we start the application.
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b kafka:9092 1 20 && \
                       echo Waiting for Confluent Schema Registry to be ready... && \
                       cub sr-ready schema-registry 8081 20 && \
                       /usr/bin/ksql-server-start /etc/ksql/ksql-server.properties --queries-file /etc/ksql/fb/init.ksql'"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_OPTS: "-Dbootstrap.servers=kafka:9092 -Dksql.schema.registry.url=http://schema-registry:8081 -Dlisteners=http://0.0.0.0:8088"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
    extra_hosts:
      - "moby:127.0.0.1"
    container_name: ksql-server
    volumes:
      - ./football-ksql:/etc/ksql/fb

  # Runs the KSQL CLI
  ksql-cli:
    image: "confluentinc/ksql-cli:4.1.0"
    hostname: ksql-cli
    depends_on:
      - kafka
      - schema-registry
      - ksql-server
    command: "perl -e 'while(1){ sleep 99999 }'"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
      STREAMS_BOOTSTRAP_SERVERS: kafka:9092
      STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
      STREAMS_SCHEMA_REGISTRY_PORT: 8081
    extra_hosts:
      - "moby:127.0.0.1"
    container_name: ksql-cli

  football-match:
    container_name: football-match
    ports:
      - "18081:18081"
    depends_on:
      - kafka
    build: football-match/
    image: football-match:latest

  football-player:
    container_name: football-player
    ports:
      - "18082:18082"
    depends_on:
      - kafka
    build: football-player/
    image: football-player:latest

  football-query:
    container_name: football-query
    ports:
      - "18083:18083"
    depends_on:
      - kafka
    build: football-query/
    image: football-query:latest
